{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aries OCA Bundles","text":"<p>This website (published from the Aries OCA Bundles GitHub repository) is human- and machine-readable registry of published Overlays Capture Architecture (OCA) Bundles to be used by Hyperledger Aries agents (issuers, holders and verifiers).</p> <p>The OCA Bundles should follow the rules for OCA for Aries RFC OCA Bundles, including the OCA for Aries Style Guide RFC. Each OCA Bundle must be accompanied by some metadata about the credential, such as on what ledger the credential schema and/or credential definition (CredDef) reside, and may be accompanied by the full OCA Source data--Excel and JSON files. There are tools in the associated GitHub repository for converting OCA Source to the Bundle to make it easier for contributors.</p>"},{"location":"#using-these-oca-bundles-in-an-aries-agent","title":"Using these OCA Bundles in an Aries Agent","text":"<p>For information about using the OCA Bundles in this registry in an Aries Agent, please see the information in the Using OCA Bundles section of this website.</p>"},{"location":"OCABundles/schema/","title":"Credential OCA Bundles","text":""},{"location":"OCABundles/schema/palestinian-authority/","title":"Palestinian Authority","text":""},{"location":"OCABundles/schema/palestinian-authority/ministry-economy/","title":"Ministry of National Economy","text":""},{"location":"OCABundles/schema/palestinian-authority/ministry-economy/digital-passport/","title":"Digital Passport Credential","text":"<p>A schema for a digital passport credential issued by the Palestinian Authority Ministry of Economy.</p> <ul> <li>Publishing Organization: Palestinian Authority / Ministry of Economy</li> <li>Primary Contact Email Address: benmoumen@gmail.com</li> </ul>"},{"location":"OCABundles/schema/palestinian-authority/ministry-economy/digital-passport/#identifiers","title":"Identifiers","text":"Identifier Location URL 8xN1VETHGo1Va6XQ7CPrkh:2:DigitalPassportCredential:0.1 unctad-indy:test https://indy.govchain.technology 8xN1VETHGo1Va6XQ7CPrkh:3:CL:16:ePassport unctad-indy:test https://indy.govchain.technology"},{"location":"OCABundles/schema/palestinian-authority/ministry-economy/digital-passport/#credential-appearance","title":"Credential Appearance","text":""},{"location":"OCABundles/schema/palestinian-authority/ministry-economy/digital-passport/#authorization","title":"Authorization","text":"<p>The following are the GitHub IDs of those authorized to make substantive updates to the OCA Bundle.</p> OCA Bundle Contributors GitHub ID Email Address Moulay Mehdi Benmoumen benmoumen benmoumen@gmail.com"},{"location":"contributing/CONTRIBUTING/","title":"Contributing to this Registry","text":"<p>Contributions to the Aries OCA Bundles Registry are welcome from anyone via GitHub pull requests to the Aries OCA Bundles GitHub repository.</p> <p>To understand the mechanics of adding an OCA Bundle to the registry, please read the document about Creating OCA Bundles.</p>"},{"location":"contributing/OCABundleCreation/","title":"OCA Bundle Creation","text":"<p>Creating an OCA Bundle consists of multiple steps.</p> <ul> <li>Creating a folder in the Aries OCA Bundles repository (via a pull request).</li> <li>Creating the <code>README.md</code> file for the OCA Bundle.</li> <li>Creating the OCA Source data, usually in Excel and JSON.</li> <li>Generating an OCA Bundle from the OCA Source Data using a script in this repository.</li> <li>The prerequisites for the script are a tad painful. We're hoping to reduce     the complexity of the script.</li> </ul> <p>We'll cover the steps in the following sections.</p>"},{"location":"contributing/OCABundleCreation/#creating-a-folder-for-your-oca-bundle","title":"Creating a Folder For Your OCA Bundle","text":"<p>Once you have forked the Aries OCA Bundles repository, create the folder for your new OCA Bundle within the <code>OCABundles</code> folder. Your folder can be placed arbitrarily deep, with some rules for the first few levels.</p> <p><code>schema</code> is the (current) name for where credential OCA Bundles are to be placed. That name may soon change (<code>credential</code> is a better name...), and in the future, a parallel folder might be added for presentation request OCA Bundles.</p> <p>Below <code>schema</code> is a list of top level credential issuers, and within each, the sub-issuers (to any depth). As you add your OCA Bundle, feel free to add as many layers of (sub-)issuers as appropriate. For example, you might include:</p> <ul> <li>the issuing sub-organization</li> <li>the type of credential</li> <li>different versions (e.g., 1.0, 1.1, 2.0, etc.) of the type of credential</li> <li>development, staging, and production versions of the credential</li> </ul> <p>For each layer, you MUST add a <code>README.md</code> file in which the top level markdown header MUST be the name of the (sub-)issuer. The <code>README.md</code> file may optionally contain additional information about the (sub-)issuer. The requirement for the <code>README.md</code> and the markdown header is that when generating the GitHub Pages registry site, the required markdown header is extracted used for the site navigation.</p> <p>This hierarchy can be seen in the [OCA Bundles] tab of this registry.</p> <p>Finally, there are the various files needed within the folder holding the OCA Bundle. At minimum, those folders MUST have a <code>README.md</code> file populated in a required format, and an <code>OCABundle.json</code> file that is the OCA Bundle itself. There will usually be other files in the folder as well, including the Excel source content for the OCA Bundle, and the <code>branding.json</code> overlay that defines the colours, images, and other metadata that contributes to the branding of the credential when displayed by an Aries agent. The creation of those files is described in the subsequent sections.</p>"},{"location":"contributing/OCABundleCreation/#creating-the-oca-bundle-readmemd-file","title":"Creating the OCA Bundle README.md File","text":"<ul> <li>README.md: MUST be present and MUST contain the information outlined   below in the README File Content section of this document.</li> <li>OCABundle.json: MUST be present and MUST contain the OCA Bundle   for the schema or credential definition.</li> <li>&lt;OCASourceExcel&gt;.xlsx: (optional) An Excel OCA Source file for the OCA Bundle.</li> <li>branding.json: (optional) A JSON file containing the source content for   the OCA for Aries Branding overlay.</li> <li>testdata.csv: (optional) A CSV file containing one or more sample data   records.</li> <li>Other files: (optional) Other files related to the OCA Bundle, such as the   images used in the branding.json file.</li> </ul>"},{"location":"contributing/OCABundleCreation/#readme-file-content","title":"README File Content","text":"<p>The README.md file for the OCA Bundle MUST be present and MUST include the information shown and described below. The hard and fast formatting requirements are in place because the file is processed by a script that generates two lists of all of the identifiers (<code>schemaId</code>s and <code>credDefId</code>s) and the OCA Bundles to which they are associated with. The lists are in the files ocbundles.json and ocabundleslist.json in the root of the (GitHub Pages) registry website and (for now) the root folder of the Aries OCA Bundles GitHub repository. If you are referencing the registry in your code (such as in an Aries wallet or verifier agent), use the registry versions of the files, as the repository ones are deprecated.</p> <pre><code># &lt;TITLE&gt;\n\n&lt;DESCRIPTION&gt;\n\n- Publishing Organization: &lt;ORGANIZATION&gt;\n- Primary Contact Email Address: &lt;CONTACT EMAIL ADDRESS&gt;\n\n## Identifiers\n\n| Identifier                                 | Location  | URL         |\n| ------------------------------------------ | --------- | ----------- |\n| &lt;SCHEMA ID or CRED DEF ID&gt;                 | &lt;LEDGER&gt;  | &lt;URL&gt;       |\n\n## Authorization\n\nThe following are the GitHub IDs of those authorized to make substantive updates to the OCA Bundle.\n\n| OCA Bundle Contributors | GitHub ID   | Email Address            |\n| ----------------------- | ----------- | ------------------------ |\n| &lt;NAME&gt;                  | &lt;GITHUB ID&gt; | &lt;EMAIL ADDRESS&gt;          |\n</code></pre> <p>Everything not in <code>&lt;&gt;</code>s must be exactly as specified above (with one exception--see below). Everything in <code>&lt;&gt;</code>s MUST be populated as described below.</p> <p>The two markdown tables MAY have multiple lines. Multiple lines in the <code>Identifiers</code> table indicates that the same OCA Bundle is used for each of the objects identified in the first column. Multiple lines in the <code>Authorization</code> table is recommended so that multiple members of the submitters team may update the OCA Bundle.</p> <ul> <li><code>&lt;TITLE&gt;</code> MUST be the name of the credential type. No other line in the   file can have a single <code>#</code> prefix.</li> <li><code>&lt;DESCRIPTION&gt;</code> is extracted for display by tools for processing this   repository (such as the [OCA Explorer]) and should describe the type of   credential to which the OCA Bundle applies.</li> <li><code>&lt;ORGANIZATION&gt;</code> is extracted for display by tools for processing this   repository (such as the [OCA Explorer]) and is the name of the organization   that submitted the OCA Bundle.</li> <li><code>&lt;CONTACT EMAIL ADDRESS&gt;</code> is an email address for the primary contact   for the OCA Bundle. The address may for a person, or better, a group   contact withing the <code>&lt;ORGANIZATION&gt;</code>.</li> <li><code>&lt;SCHEMA ID or CRED DEF ID&gt;</code> are identifiers for objects to which the   OCA Bundles applies. There can be multiple lines in the table, each with   a different identifier.</li> <li><code>&lt;LEDGER&gt;</code> is optional. It identifies the ledger on which the object   identified by the object resides. It should be in the form   [:] as defined in the did-indy specification for   <code>namespace</code>   -- e.g., <code>candy:dev</code> or <code>sovrin</code>. The value is useful when the <code>&lt;SCHEMA ID or CRED DEF ID&gt;</code> is unqualified (such as with legacy Indy identifiers) such that   the precise location of the object is not known. <li><code>&lt;URL&gt;</code> is optional and is a plain (non-Markdown) link to a ledger browser   instance of the object, such as to a transaction on   https://indyscan.io,   https://indy.govchain.technology</li> <li><code>&lt;NAME&gt;</code> is the name of a person authorized to update the OCA Bundle and   related data. There may be multiple rows in the markdown table to name multiple   people.</li> <li><code>&lt;GITHUB ID&gt;</code> is the GitHub ID of the named person.</li> <li><code>&lt;EMAIL ADDRESS&gt;</code> is the email address of the named person</li> <p>The <code>&lt;CONTACT EMAIL ADDRESS&gt;</code> and the Authorization table are to ensure that once the OCA Bundle is submitted, there are contacts available to answer questions about, and to submit updates to, the OCA Bundle.</p> <p>The contents of the <code>Authorization</code> section (following the <code>## Authorization</code> line) may be replaced with the following to avoid repeating the same contents in every OCA Bundle <code>README.md</code> file:</p> <p><code>The Authorization table for this OCA Bundle is in [this file](&lt;path-to-another-OCABundle-folder/README.md).</code></p>"},{"location":"contributing/OCABundleCreation/#creating-the-oca-source-data","title":"Creating the OCA Source Data","text":"<p>Now that you have a folder and a README.md, it's time to create the OCA Bundle Excel source file, and from that, generating the OCA Bundle itself. This section assumes you are somewhat familiar with the OCA Specification including the format of JSON OCA Bundles, and the various overlay types that have been defined. As well, we assume you are familiar with [Aries for OCA RFC 0755], and what OCA overlays are used for providing semantic, multi-language and branding information about Hyperledger AnonCreds credential types. If you haven't gone through that information, please start there.</p> <p>In the OCA for Aries RFC are the instructions for creating the OCA Source data. The following summarizes the steps of creating an OCA Source Excel file, and a <code>branding.json</code> file for the Aries-specific \"Branding\" Overlay.</p>"},{"location":"contributing/OCABundleCreation/#oca-excel-file","title":"OCA Excel File","text":"<p>An Aries OCA Bundle can be managed as pure JSON as found in this sample OCA for Aries OCA Bundle. However, managing such content in JSON is not easy, particularly if the multi-language translations come from team members not comfortable with working in JSON. An easier way to manage the data is to use an OCA source Excel spreadsheet for most of the data, add some in a simple source <code>branding.json</code> file, and to use a generator (included in the Aries OCA Bundles GitHub repository) to create the OCA Bundle file from the two sources.</p> <p>The OCA Source Spreadsheet (example here), contains the following:</p> <ul> <li>An introductory tab about the OCA content in the spreadsheet.</li> <li>A tab with instructions on using the spreadsheet.</li> <li>A \"Main\" tab with the \"Capture Base\" data, along with data for other, non-multilingual overlays.</li> <li>A language or country-language code tab per country-language to be supported by the issuer   containing the source data for all multilingual overlays.</li> </ul> <p>The following is how to create an OCA Source spreadsheet.</p> <ul> <li>Make a copy of the latest OCA Template from the Human Colossus Foundation.</li> <li>Fill in the \"Main\" tab with the attributes from the schema, completing the   relevant columns for each attribute. Current columns to complete:</li> <li>CB-CL: Classification</li> <li>CB-AN: Attribute Name</li> <li>CB-AT: Attribute Type</li> <li>CB-FA: Flagged Attribute</li> <li>OL-CH: Character Encoding</li> <li>OL-FT: Format</li> <li>OL-ST: Standard</li> <li>OL-EC: Entry Codes</li> <li>OL-UT: Unit</li> <li>As needed, populate the columns for \"dateint\" and \"Unix Time\" attributes as indicated in the Aries Specific Dates in the OCA Formats Overlay section of RFC 0755.</li> <li>Rename the sample language tab (<code>en</code>) to one of the language or language-country that as an issuer, you want to support.</li> <li>Fill in the data in columns after C (which is automatically populated from   the <code>Main</code> tab) for the first language as appropriate. In most cases only   the \"Label\" and \"Information\" columns need be populated.</li> <li>Populate column A and B as follows:</li> <li>In column A (<code>OL-MN: Meta [Attribute Name]</code>), add the values:</li> <li>\"name\"</li> <li>\"description\"</li> <li>\"issuer\"</li> <li>\"issuer_description\"</li> <li>\"issuer_url\"</li> <li>\"credential_help\"</li> <li>\"credential_support_url\"</li> <li>Complete column B (<code>OL-MV: Meta [Attribute Value]</code>) as appropriate for each column A name.</li> <li>Duplicate and rename the initial language tab for each language or language-country that as an issuer, you want to support.</li> <li>Update each additional language tab.</li> </ul> <p>Once you have the Excel file, save it to the OCA Bundle folder for your Credential.</p>"},{"location":"contributing/OCABundleCreation/#the-branding-json-file","title":"The Branding JSON File","text":"<p>In addition to the OCA Source Excel file, you should create a Branding Overlay JSON source file called <code>branding.json</code>. The format of the file is the following, and it is fully described in the OCA for Aries Style Guide RFC.</p> <pre><code>[\n  {\n    \"logo\": \"\",\n    \"background_image_slice\": \"\",\n    \"background_image\": \"\",\n    \"primary_background_color\": \"#32674e\",\n    \"secondary_background_color\": \"#32674e\",\n    \"capture_base\": \"E75sopl65qnoZRwjQQ0FjWGemLlOXcXtanhScZ2CloJY\",\n    \"digest\": \"EBQbQEV6qSEGDzGLj1CqT4e6yzESjPimF-Swmyltw5jU\",\n    \"expiry_date_attribute\": \"\",\n    \"primary_attribute\": \"\",\n    \"secondary_attribute\": \"\",\n    \"type\": \"aries/overlays/branding/1.0\"\n  }\n]\n</code></pre> <p>To create the file for your OCA Bundle:</p> <ul> <li>Create a file called <code>branding.json</code> in the same folder as your OCA Source Excel file</li> <li>Populate the data values in the overlay as appropriate for your Credential.</li> <li>Do not change the values of the <code>type</code>, <code>capture_base</code> and <code>digest</code> items.</li> </ul> <p>The image values may be URLs for the images. A common practice (but not required) is to put the images in the same folder as the OCA Source Excel and branding.json files, and to use the GitHub \"raw\" URL to reference the data, such as:</p> <p><code>https://raw.githubusercontent.com/benmoumen/aries-oca-bundles/main/OCABundles/schema/palestinian-authority/ministry-economy/digital-passport/logo.png</code></p> <p>If the images are relatively small, you can inline the images using the format <code>data:image/png;base64,&lt;base64 data&gt;</code>.</p> <p>Once you have the Excel and JSON source files, you are ready to go!</p>"},{"location":"contributing/OCABundleCreation/#generating-an-oca-bundle-from-source","title":"Generating an OCA Bundle from Source","text":"<p>A bash script <code>genBundle.sh</code> can be found in the <code>scripts</code> folder of the Aries OCA Bundles GitHub repository. To use it, you will need to install a few prerequisites--<code>jq</code> and the OCA Excel Parser.</p>"},{"location":"contributing/OCABundleCreation/#prerequisites","title":"Prerequisites","text":"<p>Developers will likely have the <code>jq</code> (JSON Query) command line utility already installed. If not, follow the JQ installation instructions. Once installed, make sure <code>jq</code> is on your path.</p> <p>Installing the OCA Excel Parser is a little more involved, as you need Rust installed on your machine. Here are the steps:</p> <ul> <li>Clone a local copy of the OCA Excel Parser repository.</li> <li>If you don't have Rust installed on your machine, following the Rust Installation Instructions, including installing all necessary dependencies.</li> <li>Follow the instructions in the repository README.md to build the parser. Currently it is just to execute <code>cargo build</code>.</li> <li>Copy the resulting executable to a directory on your PATH, e.g., <code>cp target/debug/parser ~/bin/</code></li> </ul>"},{"location":"contributing/OCABundleCreation/#running-the-generator-script","title":"Running the Generator Script","text":"<p>Assuming you are in an OCABundles folder you can run the script with a relative path, such as:</p> <p><code>../../../scripts/genBundle.sh</code></p> <p>You might want to create a symbolic link to that script in a directory on your PATH to make it easier to use.</p> <p>To Do: We could really use a Docker container image published that has the generate script and prerequisites so that we can just run a container for generation. Volunteers?</p> <p>The script checks to see that the pre-requisites (<code>jq</code> and <code>parser</code>) are available and executable, erroring off it not, and, if run without arguments, prints a usage message. Currently the <code>-x &lt;excel file&gt;</code> is required, and you can supply zero or more JSON files to be added to the OCA Bundle produced from processing the Excel file.</p> <p>The OCA source files do not have to be in the current folder and can be maintained wherever is best for your use case.</p> <p>It is strongly recommended that you use the Excel file for managing the OCA content, and use the generator to produce the actual OCA Bundle. Editing the OCA Bundle directly means that the hash values (e.g. <code>capture_base</code> and <code>digest</code>) values are out of sync with the content.</p>"},{"location":"oca-explorer/","title":"OCA Explorer","text":""},{"location":"using/usingOCABundles/","title":"Using OCA Bundles","text":"<p>The information published on this website is for both human consumption and machine readable processing by Aries Agents. This page describes how Aries Agents can use the JSON index files and OCA Bundles published in this registry.</p>"},{"location":"using/usingOCABundles/#aries-agent-processing","title":"Aries Agent Processing","text":"<p>The following are the steps for processing an OCA Bundle by an Aries Holder or Verifier.</p> <p>An Aries holder (wallet) or verifier agent MUST be pre-configured with the following URL (referenced as <code>&lt;URL&gt;</code> in the guidance that follows) for accessing the raw JSON files published as part of this registry:</p> <ul> <li><code>https://benmoumen.github.io/aries-oca-bundles/</code></li> </ul> <p>Here is how the resources published on this site are to be used by an Aries Agent:</p> <ul> <li>On startup, and periodically thereafter, load the ocabundles.json JSON index file found at <code>&lt;URL&gt;/ocabundles.json</code>.</li> <li>See the guidance below on caching the resources (index file and OCA Bundles) published on this site.</li> <li>On receipt of an AnonCreds Credential Definition (via either an [Issue Credential] or [Present Proof] protocol):</li> <li>Extract the <code>credDefId</code> and <code>schemaId</code> from the Credential Definition.</li> <li>Scan for the <code>credDefId</code> and <code>schemaId</code> in the index of OCA Bundles in the loaded ocabundles.json data structure.</li> <li>If found, extract the corresponding <code>path</code> item value from the ocabundles.json data structure entry.<ul> <li>If entries for both identifiers are found, use the <code>credDefId</code> entry.</li> </ul> </li> <li>Load and use the OCA Bundle for the credential at <code>&lt;URL&gt;/&lt;path&gt;</code>.</li> <li>If not found, proceed without an OCA Bundle for the credential.</li> </ul> <p>The use of the OCA Bundle (or proceeding without an OCA Bundle) is defined in the [OCA for Aries RFC], and the [OCA for Aries Style Guide RFC].</p>"},{"location":"using/usingOCABundles/#caching-the-index-and-oca-bundles","title":"Caching the Index and OCA Bundles","text":"<p>The Aries wallet/agent may cache the loaded ocabundles.json JSON file and OCA Bundles. The following guidance should be followed:</p> <ul> <li>The ocabundles.json JSON file should have a relatively short \"time to   live\" (TTL) in the cache so that   updates to the published data are regularly received. The TTL should be no   more than 24 hours. Further, if the loading of an OCA Bundle based on a path   in the ocabundles.json data structure fails, the ocabundles.json should be   re-retrieved and the operation tried again.</li> <li>Updates to the ocabundles.json content might include:<ul> <li>New paths for individual or all OCA Bundle files.</li> <li>Added OCA Bundles.</li> <li>Updated OCA Bundles.</li> </ul> </li> <li>The <code>sha256</code> value provided in the ocabundles.json data structure is a hash over the OCA Bundle itself. It should be used to know when to invalidate the caching of an OCA Bundle, and a new version received.</li> <li>Cache with the OCA Bundle, the <code>sha256</code> value.</li> <li>When an OCA Bundle is needed, check if the <code>sha256</code> value from the ocabundles.json data structure matches the cached value.<ul> <li>If the values match, the cached OCA Bundle is up to date.</li> <li>If the values differ, delete the cached OCA Bundle and retrieve the latest OCA Bundle from the published site.</li> </ul> </li> </ul> <p>Although the wallet/agent need not ever calculate the <code>sha256</code> value to verify it, for reference, it is calculated using the Unix <code>shasum</code> utility using the command line options: <code>shasum -a256 -U &lt;path_to_OCABundle&gt;</code>. The <code>sha256</code> values are re-calculated as part of the ocabundles.json generation process executed every time the registry is updated via a merged pull request to the Aries OCA Bundles GitHub repository, the source of this registry.</p>"}]}